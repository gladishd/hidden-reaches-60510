{"version":3,"sources":["client.js","components/AllPosts.js","components/OnePost.js","App.js","serviceWorker.js","index.js"],"names":["sanityClient","projectId","dataset","useCdn","AllPosts","useState","allPostsData","setAllPosts","useEffect","fetch","then","data","catch","console","error","log","className","map","post","index","to","slug","current","key","src","mainImage","asset","url","alt","title","builder","imageUrlBuilder","urlFor","source","image","OnePost","postData","setPostData","useParams","authorImage","name","style","height","blocks","body","clientConfig","App","component","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uMAEeA,E,MAAAA,GAAa,CAC1BC,UAAW,WACXC,QAAS,aACTC,QAAQ,ICDK,SAASC,IAAY,IAAD,EACGC,mBAAS,MADZ,mBAC1BC,EAD0B,KACZC,EADY,KAuBjC,OApBAC,qBAAU,WACRR,EACGS,MADH,sMAaGC,MAAK,SAACC,GAAD,OAAUJ,EAAYI,MAC3BC,MAAMC,QAAQC,SAChB,IAEHD,QAAQE,IAAIT,GAGV,yBAAKU,UAAU,kEACb,yBAAKA,UAAU,qDACb,wBAAIA,UAAU,6GAAd,0CACA,wBAAIA,UAAU,4FAAd,sGAIA,yBAAKA,UAAU,4CACZV,GACCA,EAAaW,KAAI,SAACC,EAAMC,GAAP,OACf,kBAAC,IAAD,CAAMC,GAAI,IAAMF,EAAKG,KAAKC,QAASC,IAAKL,EAAKG,KAAKC,SAChD,0BACEN,UAAU,sGACVO,IAAKJ,GAEL,yBACEH,UAAU,gDACVQ,IAAKN,EAAKO,UAAUC,MAAMC,IAC1BC,IAAI,KAEN,0BAAMZ,UAAU,8DACd,wBAAIA,UAAU,+FACXE,EAAKW,gB,6BC5CtBC,E,MAAUC,GAAgB/B,GAChC,SAASgC,EAAOC,GACd,OAAOH,EAAQI,MAAMD,GAGR,SAASE,IAAW,IAAD,EACA9B,mBAAS,MADT,mBACzB+B,EADyB,KACfC,EADe,KAExBhB,EAASiB,cAATjB,KAuBR,OArBAb,qBAAU,WACRR,EACGS,MADH,6BAE0BY,EAF1B,wRAgBGX,MAAK,SAACC,GAAD,OAAU0B,EAAY1B,EAAK,OAChCC,MAAMC,QAAQC,SAChB,CAACO,IAECe,EAGH,yBAAKpB,UAAU,qBACb,yBAAKA,UAAU,0CACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,+DAEb,yBAAKA,UAAU,4CACb,wBAAIA,UAAU,qCACXoB,EAASP,OAEZ,yBAAKb,UAAU,qCACb,yBACEQ,IAAKQ,EAAOI,EAASG,aAAaZ,MAClCX,UAAU,yBACVY,IAAI,kBAEN,wBAAIZ,UAAU,2CACXoB,EAASI,SAKlB,yBACExB,UAAU,gCACVQ,IAAKQ,EAAOI,EAASX,WAAWE,MAChCC,IAAI,GACJa,MAAO,CAAEC,OAAQ,YAGrB,yBAAK1B,UAAU,8DACb,kBAAC,IAAD,CACE2B,OAAQP,EAASQ,KACjB3C,UAAWD,EAAa6C,aAAa5C,UACrCC,QAASF,EAAa6C,aAAa3C,aAnCvB,2CCpBT4C,MAXf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,UAAW3C,EAAU4C,KAAK,IAAIC,OAAK,IAC1C,kBAAC,IAAD,CAAOF,UAAWZ,EAASa,KAAK,cCEpBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdpD,OAAM,SAAAE,GACLD,QAAQC,MAAMA,EAAMmD,a","file":"static/js/main.95499c95.chunk.js","sourcesContent":["import sanityClient from \"@sanity/client\";\n\nexport default sanityClient({\n  projectId: \"7youn3tm\", // find this at manage.sanity.io, run `sanity init` to initialize\n  dataset: \"production\", // this is from when we answered those question from 'sanity init'\n  useCdn: true,\n});\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport sanityClient from \"../client.js\";\n\nexport default function AllPosts() {\n  const [allPostsData, setAllPosts] = useState(null);\n\n  useEffect(() => {\n    sanityClient\n      .fetch(\n        `*[_type == \"post\"]{\n            title,\n            slug,\n            mainImage{\n              asset->{\n                _id,\n                url\n              }\n            }\n          }`\n      )\n      .then((data) => setAllPosts(data))\n      .catch(console.error);\n  }, []);\n\n  console.log(allPostsData);\n\n  return (\n    <div className=\"min-h-screen p-12 border-solid border-4 border-light-green-500\">\n      <div className=\"container mx-auto border-4 border-light-green-500\">\n        <h2 className=\"text-5xl flex justify-center subpixel-antialiased font-medium cursive text-green-600 font-serif shadow-sm\">Bloggable today, unbloggable tomorrow.</h2>\n        <h3 className=\"text-lg text-gray-600 flex hover:underline justify-center mb-12 font-serif p-4 shadow-sm\">\n          It's far better to be an actual citizen than to be a huge lover.  Before the cure comes the rumor.\n        </h3>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {allPostsData &&\n            allPostsData.map((post, index) => (\n              <Link to={\"/\" + post.slug.current} key={post.slug.current}>\n                <span\n                  className=\"block h-64 relative rounded shadow leading-snug bg-white border-l-8 border-indigo-400 bg-opacity-50\"\n                  key={index}\n                >\n                  <img\n                    className=\"w-full h-full rounded-r object-cover absolute\"\n                    src={post.mainImage.asset.url}\n                    alt=\"\"\n                  />\n                  <span className=\"block relative h-full flex justify-end items-end pr-4 pb-4\">\n                    <h2 className=\"text-gray-800 text-lg font-bold px-3 py-4 bg-green-600 text-green-100 bg-opacity-75 rounded\">\n                      {post.title}\n                    </h2>\n                  </span>\n                </span>\n              </Link>\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport sanityClient from \"../client.js\";\nimport BlockContent from \"@sanity/block-content-to-react\";\nimport imageUrlBuilder from \"@sanity/image-url\";\n\nconst builder = imageUrlBuilder(sanityClient);\nfunction urlFor(source) {\n  return builder.image(source);\n}\n\nexport default function OnePost() {\n  const [postData, setPostData] = useState(null);\n  const { slug } = useParams();\n\n  useEffect(() => {\n    sanityClient\n      .fetch(\n        `*[slug.current == \"${slug}\"]{\n            title,\n            slug,\n            mainImage{\n              asset->{\n                _id,\n                url\n              }\n            },\n            body,\n            \"name\": author->name,\n            \"authorImage\": author->image\n          }`\n      )\n      .then((data) => setPostData(data[0]))\n      .catch(console.error);\n  }, [slug]);\n\n  if (!postData) return <div>Loading...</div>;\n\n  return (\n    <div className=\"min-h-screen p-12\">\n      <div className=\"container shadow-lg mx-auto rounded-lg\">\n        <div className=\"relative\">\n          <div className=\"absolute h-full w-full flex items-center justify-center p-8\">\n            {/* Title Section */}\n            <div className=\"bg-indigo-300 bg-opacity-50 rounded p-12\">\n              <h2 className=\"cursive text-3xl lg:text-6xl mb-4\">\n                {postData.title}\n              </h2>\n              <div className=\"flex justify-center text-gray-800\">\n                <img\n                  src={urlFor(postData.authorImage).url()}\n                  className=\"w-10 h-10 rounded-full\"\n                  alt=\"Author is Kap\"\n                />\n                <h4 className=\"cursive flex items-center pl-2 text-2xl\">\n                  {postData.name}\n                </h4>\n              </div>\n            </div>\n          </div>\n          <img\n            className=\"w-full object-cover rounded-t\"\n            src={urlFor(postData.mainImage).url()}\n            alt=\"\"\n            style={{ height: \"400px\" }}\n          />\n        </div>\n        <div className=\"px-16 lg:px-48 py-12 lg:py-20 prose lg:prose-xl max-w-full\">\n          <BlockContent\n            blocks={postData.body}\n            projectId={sanityClient.clientConfig.projectId}\n            dataset={sanityClient.clientConfig.dataset}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport AllPosts from \"./components/AllPosts.js\";\nimport OnePost from \"./components/OnePost.js\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div>\n        <Route component={AllPosts} path=\"/\" exact />\n        <Route component={OnePost} path=\"/:slug\" />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}